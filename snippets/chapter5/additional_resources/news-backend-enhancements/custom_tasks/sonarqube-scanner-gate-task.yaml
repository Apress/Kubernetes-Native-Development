apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sonarqube-scanner
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
spec:
  description: >-
    The following task can be used to perform static analysis on the source code
    provided the SonarQube server is hosted

    SonarQube is the leading tool for continuously inspecting the Code Quality and Security
    of your codebases, all while empowering development teams. Analyze over 25 popular
    programming languages including C#, VB.Net, JavaScript, TypeScript and C++. It detects
    bugs, vulnerabilities and code smells across project branches and pull requests.

  workspaces:
    - name: source-dir
    - name: sonar-settings
  params:
    - name: SONAR_HOST_URL
      description: Host URL where the sonarqube server is running
      default: ""
    - name: SONAR_PROJECT_KEY
      description: Project's unique key
      default: ""
    - name: SONAR_SOURCES
      description: Folder containing the sources
      default: "."
    - name: SONAR_BINARIES
      description: Folder containing the binaries
      default: "."
    - name: SONAR_PROJECT_BASE
      description: Project Base Folder
      default: "."
    - name: SONAR_TOKEN
      description: The access token
      default: ""
  steps:
    - name: sonar-properties-create
      image: registry.access.redhat.com/ubi8/ubi-minimal:8.2
      workingDir: $(workspaces.source-dir.path)
      script: |
        #!/usr/bin/env bash

        replaceValues() {
          filename=$1
          thekey=$2
          newvalue=$3

          if ! grep -R "^[#]*\s*${thekey}=.*" $filename >/dev/null; then
            echo "APPENDING because '${thekey}' not found"
            echo "" >>$filename
            echo "$thekey=$newvalue" >>$filename
          else
            echo "SETTING because '${thekey}' found already"
            sed -ir "s|^[#]*\s*${thekey}=.*|$thekey=$newvalue|" $filename
          fi
        }

        if [[ -f $(workspaces.sonar-settings.path)/sonar-project.properties ]]; then
          echo "using user provided sonar-project.properties file"
          cp -R $(workspaces.sonar-settings.path)/sonar-project.properties $(workspaces.source-dir.path)/sonar-project.properties
        fi

        if [[ -f $(workspaces.source-dir.path)/sonar-project.properties ]]; then
          if [[ -n "$(params.SONAR_HOST_URL)" ]]; then
            replaceValues $(workspaces.source-dir.path)/sonar-project.properties sonar.host.url $(params.SONAR_HOST_URL)
          fi
          if [[ -n "$(params.SONAR_PROJECT_KEY)" ]]; then
            replaceValues $(workspaces.source-dir.path)/sonar-project.properties sonar.projectKey $(params.SONAR_PROJECT_KEY)
          fi
          if [[ -n "$(params.SONAR_SOURCES)" ]]; then
            replaceValues $(workspaces.source-dir.path)/sonar-project.properties sonar.projectKey $(params.SONAR_SOURCES)
          fi
          if [[ -n "$(params.SONAR_BINARIES)" ]]; then
            replaceValues $(workspaces.source-dir.path)/sonar-project.properties sonar.projectKey $(params.SONAR_BINARIES)
          fi
          if [[ -n "$(params.SONAR_PROJECT_BASE)" ]]; then
            replaceValues $(workspaces.source-dir.path)/sonar-project.properties sonar.projectKey $(params.SONAR_PROJECT_BASE)
          fi
          if [[ -n "$(params.SONAR_TOKEN)" ]]; then
            replaceValues $(workspaces.source-dir.path)/sonar-project.properties sonar.login $(params.SONAR_TOKEN)
          fi
        else
          touch sonar-project.properties
          echo "sonar.projectKey=$(params.SONAR_PROJECT_KEY)" >> sonar-project.properties
          echo "sonar.host.url=$(params.SONAR_HOST_URL)" >> sonar-project.properties
          echo "sonar.sources=$(params.SONAR_SOURCES)" >> sonar-project.properties
          echo "sonar.java.binaries=$(params.SONAR_BINARIES)" >> sonar-project.properties
          echo "sonar.projectBaseDir=$(params.SONAR_PROJECT_BASE)" >> sonar-project.properties
          echo "sonar.login=$(params.SONAR_TOKEN)" >> sonar-project.properties
        fi

        echo "---------------------------"
        cat $(workspaces.source-dir.path)/sonar-project.properties

    - name: sonar-scan
      image: docker.io/sonarsource/sonar-scanner-cli:4.5@sha256:b8c95a37025f3c13162118cd55761ea0b2a13d1837f9deec51b7b6d82c52040a #tag: 4.5
      workingDir: $(workspaces.source-dir.path)
      command:
        - sonar-scanner
    - name: quality-gate
      image: gcr.io/cloud-builders/mvn@sha256:57523fc43394d6d9d2414ee8d1c85ed7a13460cbb268c3cd16d28cfb3859e641
      workingDir: $(workspaces.source-dir.path)/$(params.SONAR_PROJECT_BASE)
      script: |
        #!/usr/bin/env bash
        if ! [[ -f $(workspaces.source-dir.path)/$(params.SONAR_PROJECT_BASE)/pom.xml ]]; then
        	mvn archetype:generate -DgroupId=dummy-pom -DartifactId=dummy-pom -DinteractiveMode=false
        	cp dummy-pom/pom.xml . 
        	rm -rf dummy-pom
        	echo "Generated dummy pom.xml"
        	echo "---------------------------"
        	cat $(workspaces.source-dir.path)/$(params.SONAR_PROJECT_BASE)/pom.xml
        fi
        mvn de.qaware.tools.sonarqube-build-breaker:sqbb-maven-plugin:sqbb -Dsqbb.sonarQubeUrl=$(params.SONAR_HOST_URL) -Dsqbb.sonarQubeToken=$(params.SONAR_TOKEN) -Dsqbb.projectKey=$(params.SONAR_PROJECT_KEY)